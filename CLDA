print("The Hexation | Loading")
------------------------------ [ Variables ] ------------------------------
repeat wait() until game:IsLoaded()
wait(2)
print("The Hexation | Loaded")
if game:IsLoaded() == true then
    local g, w, l, t, decalsyeeted = game, game.Workspace, game.Lighting, game.Workspace.Terrain, true
    t.WaterWaveSize, t.WaterWaveSpeed, t.WaterReflectance, t.WaterTransparency = 0, 0, 0, 0
    l.GlobalShadows, l.FogEnd, l.Brightness = false, 9e9, 0
    settings().Rendering.QualityLevel = "Level01"
    for _,v in pairs(g:GetDescendants()) do if (v:IsA("Part") or v:IsA("Union") or v:IsA("CornerWedgePart") or v:IsA("TrussPart")) then v.Material, v.Reflectance = "Plastic", 0 
    elseif (v:IsA("Decal") or v:IsA("Texture")) and decalsyeeted then v.Transparency = 1 elseif v:IsA("ParticleEmitter") or v:IsA("Trail") then v.Lifetime = NumberRange.new(0)
    elseif v:IsA("Explosion") then v.BlastPressure, v.BlastRadius = 1, 1 elseif v:IsA("Fire") or v:IsA("SpotLight") or v:IsA("Smoke") then v.Enabled = false 
    elseif v:IsA("MeshPart") then v.Material, v.Reflectance, v.TextureID = "Plastic", 0, 10385902758728957 end end
    for _,e in pairs(l:GetChildren()) do if (e:IsA("BlurEffect") or e:IsA("SunRaysEffect") or e:IsA("ColorCorrectionEffect") or e:IsA("BloomEffect") or e:IsA("DepthOfFieldEffect")) then e.Enabled = false end end

    local Collection = {}

    local Debris = game:GetService("Debris")
    local TweenService = game:GetService("TweenService")
    local Tween_Info = TweenInfo.new(0.2, Enum.EasingStyle.Linear)

    function Collection:new(_Object, Property)
        local Object = Instance.new(_Object)
        for i, v in pairs(Property) do
            Object[i] = v
        end
        return Object
    end
    

    local Debug = true

    local Players = game:GetService("Players")
    local Workspace = game:GetService("Workspace")
    local RunService = game:GetService("RunService")
    local GuiService = game:GetService("GuiService")
    local VirtualUser = game:GetService("VirtualUser")
    local HttpService = game:GetService("HttpService")
    local TweenService = game:GetService("TweenService")
    local TeleportService = game:GetService("TeleportService")
    local UserInputService = game:GetService("UserInputService")
    local ReplicatedStorage = game:GetService("ReplicatedStorage")
    local VirtualInputManager = game:GetService("VirtualInputManager")

    local LocalPlayer = Players.LocalPlayer
    local PlayerName = LocalPlayer.Name

    local Collection = {}
    Collection.__index = Collection

    ------------------------------ [ Checking Variable ] ------------------------------

    local roman_to_arabic = {
        ["I"] = 1, ["V"] = 5, ["X"] = 10, ["L"] = 50, ["C"] = 100, ["D"] = 500, ["M"] = 1000
    }
    
    function RomanToArabic(roman)
        local total = 0
        local previous = 0
        
        for i = #roman, 1, -1 do
            local char = roman:sub(i, i)
            local value = roman_to_arabic[char]
            
            if value < previous then
                total = total - value
            else
                total = total + value
            end
            
            previous = value
        end
        
        return total
    end
    
    local arabic_to_roman = {
        {1000, "M"}, {900, "CM"}, {500, "D"}, {400, "CD"},
        {100, "C"}, {90, "XC"}, {50, "L"}, {40, "XL"},
        {10, "X"}, {9, "IX"}, {5, "V"}, {4, "IV"},
        {1, "I"}
    }
    
    function ArabicToRoman(arabic)
        local roman = ""
        
        for _, pair in ipairs(arabic_to_roman) do
            local value, symbol = pair[1], pair[2]
            
            while arabic >= value do
                roman = roman .. symbol
                arabic = arabic - value
            end
        end
        
        return roman
    end

    local DataManager = {}
    function DataManager:Get()
        return DataManager.Save.Get()
    end
    DataManager.Save = require(game:GetService("ReplicatedStorage").Library.Client.Save)
    DataManager.Upgrades = require(game:GetService("ReplicatedStorage").Library.Directory.Upgrades)

    local Network = game:GetService("ReplicatedStorage"):FindFirstChild("Network")

    local PotionRecipes = require(game:GetService("ReplicatedStorage").Library.Directory.CraftingMachines)

    function DataManager:GetEquippedPetsEUID()
        local EUIDs = {}
        local EquippedPets = DataManager:Get()['EquippedPets']

        for i,v in next, EquippedPets do
            table.insert(EUIDs, tostring(i))
        end

        return EUIDs
    end

    function DataManager:GetBreakables()
        for i,v in next, workspace.__THINGS.Breakables:GetChildren() do
            if v:IsA('Model') then
                return v
            end
        end

        return nil
    end

    function DataManager:SetTarget(UUID)
        local EquippedEUIDs = DataManager:GetEquippedPetsEUID() -- > 3824, 3124, 5234

        for i,v in next, EquippedEUIDs do
            Network.Breakables_JoinPetBulk:FireServer({[v] = tonumber(UUID)})
        end
    end

    function DataManager:Click(Model)
        if Model and Model:FindFirstChildOfClass('MeshPart') and Model:FindFirstChildOfClass('MeshPart'):FindFirstChild('Hitbox') and Model:FindFirstChildOfClass('MeshPart'):FindFirstChild('Hitbox'):FindFirstChildOfClass('ClickDetector') then
            fireclickdetector(Model:FindFirstChildOfClass('MeshPart'):FindFirstChild('Hitbox'):FindFirstChildOfClass('ClickDetector'))
        end
    end

    DataManager.JoinCooldown = 0

    function DataManager:Break()
        local Breakables = DataManager:GetBreakables()

        if Breakables then
            DataManager:SetTarget(Breakables.Name)
            DataManager:Click(Breakables)
        end
    end

    function DataManager:GetUpgrades()
        local Upgrades = DataManager:Get()['EquippedPets']
    end
    
    function DataManager:PurchaseUpgrades()
        for key, value in pairs(DataManager.Upgrades) do
            game:GetService("ReplicatedStorage").Network.Upgrades_Purchase:InvokeServer(tostring(key))
        end
    end

    function DataManager:GetFruitID()
        local FruitIDs = {}
        local Fruit = DataManager:Get()["Inventory"]["Fruit"]
        for i,v in next, Fruit do
            table.insert(FruitIDs, tostring(i))
        end
        return FruitIDs
    end

    function DataManager:UseFruits()
        local FruitIDs = DataManager:GetFruitID()
        
        for i, v in next, FruitIDs do
            Network["Fruits: Consume"]:InvokeServer(tostring(v), 1)
        end
    end

    function DataManager:GetConsumable()
        local Consumables = DataManager:Get()["Inventory"]["Consumable"]
        local ConsumableIDs = {}
        for i,v in next, Consumables do
            table.insert(ConsumableIDs, v)
        end
        return ConsumableIDs
    end

    function DataManager:GetConsumableIDs()
        local Consumables = DataManager:Get()["Inventory"]["Consumable"]
        local ConsumableIDs = {}
        for i,v in next, Consumables do
            table.insert(ConsumableIDs, i)
        end
        return ConsumableIDs
    end

    function DataManager:GetPotionRecipeIndex(id, tn)
        -- for i, v in pairs(require(game:GetService("ReplicatedStorage").Library.Directory.CraftingMachines)) do
        --     if v["PotionCraftingMachine"] then
        --         for ii, recipe in pairs(v["Recipes"]) do
        --             local result = recipe["Result"]["_data"]
        --             if result["id"] == id and result["tn"] == tn then
        --                 return tostring(recipe["RecipeIndex"])
        --             end
        --         end
        --     end
        -- end

        local PotionCraftingMachine = require(game:GetService("ReplicatedStorage").Library.Directory.CraftingMachines).PotionCraftingMachine

        for i,v in next, PotionCraftingMachine.Recipes do
            local ResultData = v['Result']['_data']

            if ResultData and ResultData['id'] == id and ResultData['tn'] == tn then
                return tonumber(v['RecipeIndex'])
            end
        end

        return nil
    end
    
    Network.Inventory_Opened:FireServer()

    ------------------------------ [ UI Library ] ------------------------------

    function Collection:Keyboard(Key,Holding)
        spawn(function()
            xpcall(function()
                if Holding == nil then
                    Holding = 0 
                end
                VirtualInputManager:SendKeyEvent(true,Key,false,LocalPlayer.Character.HumanoidRootPart)
                wait(Holding)
                VirtualInputManager:SendKeyEvent(false,Key,false,LocalPlayer.Character.HumanoidRootPart) 
            end,warn)
        end)
    end

    function Collection:FireButton(button)
        if not button then return end;
        local VisibleUI = LocalPlayer.PlayerGui:FindFirstChild("_") or Instance.new("Frame")
        VisibleUI.Name = "_"
        VisibleUI.BackgroundTransparency = 1
    
        LocalPlayer.PlayerGui.SelectionImageObject = VisibleUI
    
    
        GuiService.SelectedObject = button;
    
        VirtualInputManager:SendKeyEvent(true, 'Return', false, game)
        task.wait(.1);
        VirtualInputManager:SendKeyEvent(false, 'Return', false, game)
    
        task.wait(.5)
        GuiService.SelectedObject = nil;
    end;

    local VirtualInputManager = game:GetService("VirtualInputManager")

    function simulateClick(button)
        if typeof(button) == "Instance" and (button:IsA("TextButton") or button:IsA("Frame") or button:IsA("ImageButton")) then
            local buttonPosition = button.AbsolutePosition + button.AbsoluteSize / 2
            VirtualInputManager:SendMouseButtonEvent(buttonPosition.X, buttonPosition.Y + 40, 0, true, button, 0) 
            VirtualInputManager:SendMouseButtonEvent(buttonPosition.X, buttonPosition.Y + 40, 0, false, button, 0) 
        else
            warn("The target is not a valid button instance.")
        end
    end
        
    simulateClick(LocalPlayer.PlayerGui.Main.Bottom.Buttons.Pets)
    

    task.wait(0.1)
    LocalPlayer.PlayerGui.Main.Enabled = true
    

    -- firesignal(game:GetService("Players").LocalPlayer.PlayerGui.Main.Bottom.Buttons.Pets.ImageLabel)

    ------------------------------ [ Workspace ] ------------------------------

    game.Players.LocalPlayer.Idled:Connect(function()
        local VirtualUser = game:GetService("VirtualUser")
        VirtualUser:CaptureController()
        VirtualUser:ClickButton2(Vector2.new())
    end)
    
    game:GetService("StarterGui"):SetCoreGuiEnabled(Enum.CoreGuiType.PlayerList, false) -- Disable leaderboard
    game:GetService("StarterGui"):SetCoreGuiEnabled(Enum.CoreGuiType.Chat, false) -- Disable Chat

    local player = game.Players.LocalPlayer
    local playerGui = player:WaitForChild("PlayerGui")

    Network.Eggs_Roll:InvokeServer()
    task.wait(0.3)
    local function createButton()
        local screenGui = playerGui:FindFirstChild('DaikiScreenGui') or Instance.new("ScreenGui")
        screenGui.Name = "DaikiScreenGui"
        screenGui.Parent = playerGui
        screenGui.IgnoreGuiInset = true
        screenGui.ResetOnSpawn = false
    
        local ktbg = Instance.new("ImageLabel")
    
        ktbg.Parent = screenGui
        ktbg.Size = UDim2.new(1, 0, 1, 0)
        ktbg.Position = UDim2.new(0.5, 0, 0.5, 0)
        ktbg.AnchorPoint = Vector2.new(0.5, 0.5)
        ktbg.Image = "rbxassetid://94083352778363"
        ktbg.BackgroundTransparency = 1
    
        local usernameui = Instance.new("TextLabel")

        local imageButton = Instance.new("ImageButton")
        imageButton.Parent = screenGui
    
        imageButton.Size = UDim2.new(0, 50, 0, 50)
        imageButton.Position = UDim2.new(0.2, 0, 0.2, 0)
        imageButton.AnchorPoint = Vector2.new(0.4, 0.5)
        imageButton.Image = "rbxassetid://83401054908706"
        imageButton.BackgroundTransparency = 1
    
        imageButton.MouseButton1Click:Connect(function()
            if ktbg.Visible == true then ktbg.Visible = false else ktbg.Visible = true end; if ktbg.Visible == true then game:GetService("RunService"):Set3dRenderingEnabled(false) else game:GetService("RunService"):Set3dRenderingEnabled(true) end
        end)
    
        if player.PlayerGui.Main.Top:FindFirstChild('Coins') then
            local Coin = player.PlayerGui.Main.Top:FindFirstChild('Coins'):Clone()
            Coin.Parent = ktbg

            Coin.Position = UDim2.new(0.265, 0, 0.78, 0)
            Coin.AnchorPoint = Vector2.new(0.5, 0.5)
            Coin.Size = UDim2.new(0, 0, 0.1, 0)
        
            local originalCoin = player.PlayerGui.Main.Top.Coins
            local clonedIconMult = Coin.Icon.Mult
            local clonedAmount = Coin.Amount

            originalCoin.Icon.Mult:GetPropertyChangedSignal("Text"):Connect(function()
                clonedIconMult.Text = originalCoin.Icon.Mult.Text
            end)

            originalCoin.Amount:GetPropertyChangedSignal("Text"):Connect(function()
                clonedAmount.Text = originalCoin.Amount.Text
            end)

            local bestroll = LocalPlayer.PlayerGui.DaikiScreenGui.ImageLabel.Coins.Amount:Clone()
            bestroll.Parent = ktbg
            bestroll.Size = UDim2.new(0, 0, 0.1, 0)
            bestroll.Position = UDim2.new(0.75, 0, 0.78, 0)
            bestroll.AnchorPoint = Vector2.new(0.5, 0.5)
            
            player.leaderstats["\240\159\142\178 Rolls"].Changed:Connect(function(newValue)
                bestroll.Text = tostring(newValue)
            end)

            local dicecopy = LocalPlayer.PlayerGui.Main.Bottom.Buttons.Roll:Clone()
            dicecopy.Parent = ktbg
            dicecopy.Size = UDim2.new(0.15, 0, 0.15, 0)
            dicecopy.Position = UDim2.new(0.75, 0, 0.78, 0)
            dicecopy.AnchorPoint = Vector2.new(0.5, 0.5)

            local equippedPetsUI = LocalPlayer.PlayerGui.Inventory.Frame.Main.Pages.Pets.Equipped
            local petcopy = equippedPetsUI:Clone()
            
            petcopy.Parent = ktbg
            petcopy.Size = UDim2.new(0.8, 0, 0.3, 0)
            petcopy.Position = UDim2.new(0.5, 0, 0.5, 0)
            petcopy.AnchorPoint = Vector2.new(0.5, 0.5)
            

            spawn(function()
                while task.wait() do
                    for _, child in ipairs(equippedPetsUI:GetChildren()) do
                        if child:IsA("ImageLabel") or child:IsA("ImageButton") then
                            local iconClone = child:Clone()
                            iconClone.Parent = petcopy
                        end
                    end
                end
            end)

            local function syncPropertyChanges(source, target)
                if source:IsA("ImageLabel") or source:IsA("ImageButton") then
                    source:GetPropertyChangedSignal("Image"):Connect(function()
                        target.Image = source.Image
                    end)
                end
                
                if source:IsA("TextLabel") or source:IsA("TextButton") then
                    source:GetPropertyChangedSignal("Text"):Connect(function()
                        target.Text = source.Text
                    end)
                end
            end
            
            local function recursiveSync(source, target)
                for _, sourceChild in ipairs(source:GetChildren()) do
                    local targetChild = target:FindFirstChild(sourceChild.Name)
                    if targetChild then
                        syncPropertyChanges(sourceChild, targetChild)
                        
                        if sourceChild:IsA("Frame") then
                            recursiveSync(sourceChild, targetChild)
                        end
            
                        if sourceChild:IsA("UIAspectRatioConstraint") then
                            targetChild.AspectRatio = sourceChild.AspectRatio
                        elseif sourceChild:IsA("UIConstraint") then
                            for property, value in pairs(sourceChild:GetAttributes()) do
                                targetChild:SetAttribute(property, value)
                            end
                        end
                    end
                end
            end
            
            recursiveSync(LocalPlayer.PlayerGui.Main.Bottom.Buttons.Roll, dicecopy)
            
            spawn(function()
                while task.wait() do
                    recursiveSync(LocalPlayer.PlayerGui.Main.Bottom.Buttons.Roll, dicecopy)
                end
            end)
        end
        
        spawn(function()
            while task.wait() do
                screenGui.DisplayOrder = 969
            end
        end)

        return screenGui
    end
    
    local initialGui = createButton()

    spawn(function()
        while task.wait() do
            Network.Eggs_Roll:InvokeServer() -- Roll
            DataManager:Break() -- Breakables
        end
    end)

    spawn(function()
        while task.wait() do
            DataManager:PurchaseUpgrades() -- Purchase Upgrades
        end
    end)

    spawn(function()
        while task.wait() do
            local args = {}
            
            for i, orb in ipairs(game:GetService("Workspace").__THINGS.Orbs:GetChildren()) do
                table.insert(args, tonumber(orb.Name))
            end
            Network["Orbs: Collect"]:FireServer(args) -- Collect Orbs (Coins | Bags | Drops)
        end
    end)

    spawn(function()
        while task.wait() do
            Network.VendingMachines_Purchase:InvokeServer("PotionVendingMachine") -- VendingMachine
        end
    end)

    spawn(function()
        while task.wait(60) do
            DataManager:UseFruits() -- Use Fruits
        end
    end)

    -- spawn(function()
    --     while task.wait() do
    --         for i = 0, 50 do
    --             game:GetService("ReplicatedStorage").Network.Relics_Request:InvokeServer(i)
    --             game:GetService("ReplicatedStorage").Network.Relic_Found:InvokeServer(i)
    --         end
    --     end
    -- end)
    
    spawn(function()
        while task.wait() do
            for i = 1, 6 do
                local args = {[1] = "StandardMerchant",[2] = i}
                Network.CustomMerchants_Purchase:InvokeServer(unpack(args)) -- Purchase from Merchant
            end
        end
    end)


    -- Craft Faster Rolling --
    spawn(function()
        while task.wait(1) do
            for i, v in next, DataManager:Get()["Inventory"]["Consumable"] do
                if not v['id'] or not v['tn'] or not v['_am'] then continue end
                
                -- if v['id'] ~= 'Faster Rolls Potion' then continue end
                -- if v['tn'] ~= 1 then continue end
                -- if v['_am'] ~= 0 then continue end
                if v['id'] == 'Faster Rolls Potion' and v['tn'] == 1 and v['_am'] >= 5 then

                    local PotionRecipeIndex = DataManager:GetPotionRecipeIndex("Faster Rolls Potion", 2)
                    local NumberOfPotions = 1

                    if PotionRecipeIndex then
                        NumberOfPotions = v['_am'] / 5
                        NumberOfPotions = math.floor(NumberOfPotions)

                        warn(('Crafting Tier %d Faster Rolls Potion, Amount: %d'):format(v['tn'] + 1, NumberOfPotions))

                        Network.CraftingMachine_Craft:InvokeServer("PotionCraftingMachine", PotionRecipeIndex, NumberOfPotions)
                    end
                end
            end
        end
    end)

    local InstantLuckIIIReady = false
    local BlazingDiceReady = false
    local RainbowReady = false
    local GoldenDiceReady = false
    local InstantLuckIIIid
    local BlazingDiceid
    local Rainbowid
    local GoldenDiceid

    spawn(function()
        while task.wait(1) do
            for i, v in next, DataManager:Get()["Inventory"]["Consumable"] do
                if not v['id'] or not v['tn'] or not v['_am'] then continue end

                if v['id'] == 'Faster Rolls Potion' and v['tn'] == 2 and v['_am'] >= 1 then
                    Network["Consumables_Consume"]:InvokeServer(i, (v['_am']))
                end

                if v['id'] == 'Lucky Potion' and v['tn'] == 6 and v['_am'] >= 1 then
                    Network["Consumables_Consume"]:InvokeServer(i, (v['_am']))
                end

                if v['id'] == 'Lucky Potion' and v['tn'] == 7 and v['_am'] >= 1 then
                    Network["Consumables_Consume"]:InvokeServer(i, (v['_am']))
                end

                if v['id'] == 'Coins Potion' and v['tn'] == 6 and v['_am'] >= 1 then
                    Network["Consumables_Consume"]:InvokeServer(i, (v['_am']))
                end

                if v['id'] == 'Coins Potion' and v['tn'] == 7 and v['_am'] >= 1 then
                    Network["Consumables_Consume"]:InvokeServer(i, (v['_am']))
                end
                

                if v['id'] == 'Golden Dice Potion' and v['tn'] == 1 and v['_am'] ~= 0 then
                    GoldenDiceReady = true
                    GoldenDiceid = i
                end
                if v['id'] == 'Rainbow Dice Potion' and v['tn'] == 1 and v['_am'] ~= 0 then
                    RainbowReady = true
                    Rainbowid = i
                end
                if v['id'] == 'Blazing Dice Potion' and v['tn'] == 1 and v['_am'] ~= 0 then
                    BlazingDiceReady = true
                    BlazingDiceid = i
                end
                if v['id'] == 'Instant Luck Potion' and v['tn'] == 3 and v['_am'] ~= 0 then
                    InstantLuckIIIReady = true
                    InstantLuckIIIid = i
                end
                -- print(InstantLuckIIIid, BlazingDiceid, Rainbowid, GoldenDiceid)
                -- print(InstantLuckIIIReady, BlazingDiceReady, RainbowReady, GoldenDiceReady)
                if InstantLuckIIIReady and BlazingDiceReady and RainbowReady and GoldenDiceReady then
                    task.wait(1.75)
                    Network["Consumables_Consume"]:InvokeServer(InstantLuckIIIid, 1)
                    task.wait(1)
                    Network["Consumables_Consume"]:InvokeServer(BlazingDiceid, 1)
                    task.wait(1)
                    Network["Consumables_Consume"]:InvokeServer(Rainbowid, 1)
                    task.wait(1)
                    Network["Consumables_Consume"]:InvokeServer(GoldenDiceid, 1)

                    task.wait(5)
                    InstantLuckIIIReady = false
                    BlazingDiceReady = false
                    RainbowReady = false
                    GoldenDiceReady = false
                end


            end
            -- for i, v in next, DataManager:GetConsumable() do
            --     print(v, v.Name, v['id'], v['tn'], v['_am'])
            -- end
        end
    end)

    -- spawn(function()
    --     while task.wait() do
            
    --     end
    -- end)

    -- vv Craft Tier 2 Lucky Pots vv--

    -- spawn(function()
    --     while task.wait(1) do
    --         for i, v in next, DataManager:Get()["Inventory"]["Consumable"] do
    --             if not v['id'] or not v['tn'] or not v['_am'] then continue end
                
    --             if v['id'] ~= 'Lucky Potion' then continue end
    --             if v['tn'] ~= 1 then continue end
    --             if v['_am'] < 3 then continue end

    --             local PotionRecipeIndex = DataManager:GetPotionRecipeIndex("Lucky Potion", 2)
    --             local NumberOfPotions = 1

    --             if PotionRecipeIndex then
    --                 NumberOfPotions = v['_am'] / 3
    --                 NumberOfPotions = math.floor(NumberOfPotions)

    --                 warn(('Crafting Tier %d Lucky Potion, Amount: %d'):format(v['tn'] + 1, NumberOfPotions))

    --                 Network.CraftingMachine_Craft:InvokeServer("PotionCraftingMachine", PotionRecipeIndex, NumberOfPotions)
    --             end
                
    --         end
    --     end
    -- end)

    -- -- vv Craft Tier 3 Lucky Pots vv--

    -- spawn(function()
    --     while task.wait(1) do
    --         for i, v in next, DataManager:Get()["Inventory"]["Consumable"] do
    --             if not v['id'] or not v['tn'] or not v['_am'] then continue end
                
    --             if v['id'] ~= 'Lucky Potion' then continue end
    --             if v['tn'] ~= 2 then continue end
    --             if v['_am'] < 4 then continue end

    --             local PotionRecipeIndex = DataManager:GetPotionRecipeIndex("Lucky Potion", 3)
    --             local NumberOfPotions = 1

    --             if PotionRecipeIndex then
    --                 NumberOfPotions = v['_am'] / 4
    --                 NumberOfPotions = math.floor(NumberOfPotions)

    --                 warn(('Crafting Tier %d Lucky Potion, Amount: %d'):format(v['tn'] + 1, NumberOfPotions))

    --                 Network.CraftingMachine_Craft:InvokeServer("PotionCraftingMachine", PotionRecipeIndex, NumberOfPotions)
    --             end
                
    --         end
    --     end
    -- end)

    -- -- vv Craft Tier 4 Lucky Pots vv--

    -- spawn(function()
    --     while task.wait(1) do
    --         for i, v in next, DataManager:Get()["Inventory"]["Consumable"] do
    --             if not v['id'] or not v['tn'] or not v['_am'] then continue end
                
    --             if v['id'] ~= 'Lucky Potion' then continue end
    --             if v['tn'] ~= 3 then continue end
    --             if v['_am'] < 5 then continue end

    --             local PotionRecipeIndex = DataManager:GetPotionRecipeIndex("Lucky Potion", 4)
    --             local NumberOfPotions = 1

    --             if PotionRecipeIndex then
    --                 NumberOfPotions = v['_am'] / 5
    --                 NumberOfPotions = math.floor(NumberOfPotions)

    --                 warn(('Crafting Tier %d Lucky Potion, Amount: %d'):format(v['tn'] + 1, NumberOfPotions))

    --                 Network.CraftingMachine_Craft:InvokeServer("PotionCraftingMachine", PotionRecipeIndex, NumberOfPotions)
    --             end
                
    --         end
    --     end
    -- end)

    -- spawn(function()
    --     while task.wait(20) do
    --         for i, v in next, DataManager:Get()["Inventory"]["Fruit"] do
    --             if not v['id'] or not v['_am'] then continue end
                
    --             if v['id'] == 'Rainbow' or v['id'] == 'Orange' or v['id'] == 'Watermelon' then continue end
    --             if v['sh'] then continue end
    --             if v['_am'] < 100 then continue end

    --             warn(('Using %s %s to upgrade Fruits Machine'):format(100, v['id'], tostring(v)))

    --             -- local args = {
    --             --     [1] = {
    --             --         [tostring(v)] = 100
    --             --     },
    --             --     [2] = false
    --             -- }
                
    --             -- game:GetService("ReplicatedStorage").Network.UpgradeFruitsMachine_Activate:InvokeServer(unpack(args))
                
    --         end
    --     end
    -- end)
    function DataManager:GetPotion(name, tier)
        for i, v in next, DataManager:Get()["Inventory"]["Consumable"] do
            if not v['id'] or not v['tn'] or not v['_am'] then continue end
    
            if v['id'] == name and v['tn'] == tier then
                return v
                -- {
                --     "id" : "Walkspeed Potion"
                --     "tn" : 3
                --     "_am" : 989
                -- }
            end
        end
    
        return {
            ["id"] = name,
            ["tn"] = tier,
            ["_am"] = 0
        }
    end
    
    function DataManager:GetFruit(name)
        for i, v in next, DataManager:Get()["Inventory"]["Fruit"] do
            if not v['id'] or not v['_am'] or v['sh'] then continue end
    
            if v['id'] == name then
                return v
            end
        end
    
        return {
            ["id"] = name,
            ["_am"] = 0
        }
    end
    
    function DataManager:GetPotionRecipeIndex(id, tn)
        local PotionCraftingMachine = require(game:GetService("ReplicatedStorage").Library.Directory.CraftingMachines).PotionCraftingMachine
    
        for i,v in next, PotionCraftingMachine.Recipes do
            local ResultData = v['Result']['_data']
    
            if ResultData and ResultData['id'] == id and ResultData['tn'] == tn then
                return tonumber(v['RecipeIndex'])
            end
        end
    
        return nil
    end
    
    function DataManager:CraftInstantLuckIII2()
        local Potions = {
            ['Instant Luck III'] = self:GetPotion("Instant Luck Potion", 3),
            ['Instant Luck II'] = self:GetPotion("Instant Luck Potion", 2),
            ['Instant Luck I'] = self:GetPotion("Instant Luck Potion", 1),
            ['Rainbow Dice Potion'] = self:GetPotion("Rainbow Dice Potion", 1),
            ['Lucky Potion V'] = self:GetPotion("Lucky Potion", 5),
            ['Lucky Potion IV'] = self:GetPotion("Lucky Potion", 4),
            ['Lucky Potion III'] = self:GetPotion("Lucky Potion", 3),
            ['Lucky Potion II'] = self:GetPotion("Lucky Potion", 2),
            ['Lucky Potion I'] = self:GetPotion("Lucky Potion", 1),
            ['Golden Dice Potion'] = self:GetPotion("Golden Dice Potion", 1),
            ['Rainbow Fruit'] = self:GetFruit("Rainbow"),
            ['Orange Fruit'] = self:GetFruit("Orange")
        }
    
        -- Craft Instant Luck III
        if Potions['Instant Luck II']['_am'] >= 3 and Potions['Rainbow Dice Potion']['_am'] >= 2 then
        
            local PotionRecipeIndex = DataManager:GetPotionRecipeIndex("Instant Luck Potion", 3)
    
            Network.CraftingMachine_Craft:InvokeServer("PotionCraftingMachine", PotionRecipeIndex, 1)
    
            return
        end
    
        -- Craft Instant Luck II
        if Potions['Instant Luck I']['_am'] >= 3 and Potions['Rainbow Dice Potion']['_am'] >= 2 then
    
            local PotionRecipeIndex = DataManager:GetPotionRecipeIndex("Instant Luck Potion", 2)
    
            Network.CraftingMachine_Craft:InvokeServer("PotionCraftingMachine", PotionRecipeIndex, 1)
    
            return
        end
    
        -- Craft Instant Luck I
        if Potions['Rainbow Dice Potion']['_am'] >= 2 and Potions['Golden Dice Potion']['_am'] >= 3 then
    
            if Potions['Lucky Potion V']['_am'] < 2 then
                -- 1-5 
                
                -- Craft Lucky Potion V
                if Potions['Lucky Potion IV']['_am'] >= 5 and Potions['Orange Fruit']['_am'] >= 12 then
    
                    local PotionRecipeIndex = DataManager:GetPotionRecipeIndex("Lucky Potion", 5)
    
                    Network.CraftingMachine_Craft:InvokeServer("PotionCraftingMachine", PotionRecipeIndex, 1)
                    
                    return
                end
    
                -- Craft Lucky Potion IV
                if Potions['Lucky Potion III']['_am'] >= 5 then
    
                    local PotionRecipeIndex = DataManager:GetPotionRecipeIndex("Lucky Potion", 4)
    
                    Network.CraftingMachine_Craft:InvokeServer("PotionCraftingMachine", PotionRecipeIndex, 1)
    
                    return
                end
                
                -- Craft Lucky Potion III
                if Potions['Lucky Potion II']['_am'] >= 4 then
    
                    local PotionRecipeIndex = DataManager:GetPotionRecipeIndex("Lucky Potion", 3)
    
                    Network.CraftingMachine_Craft:InvokeServer("PotionCraftingMachine", PotionRecipeIndex, 1)
                    
                    return
                end
    
                -- Craft Lucky Potion II
                if Potions['Lucky Potion I']['_am'] >= 3 then
    
                    local PotionRecipeIndex = DataManager:GetPotionRecipeIndex("Lucky Potion", 2)
    
                    Network.CraftingMachine_Craft:InvokeServer("PotionCraftingMachine", PotionRecipeIndex, 1)
                    
                    return
                end
                
                return
            end
    
            local PotionRecipeIndex = DataManager:GetPotionRecipeIndex("Instant Luck Potion", 1)
    
            Network.CraftingMachine_Craft:InvokeServer("PotionCraftingMachine", PotionRecipeIndex, 1)
    
            return
        end
    
        -- Craft Golden Dice Potion
        if Potions['Golden Dice Potion']['_am'] < 3 and Potions['Lucky Potion III']['_am'] >= 2 and Potions['Orange Fruit']['_am'] >= 7 then
    
            local PotionRecipeIndex = DataManager:GetPotionRecipeIndex("Golden Dice Potion", 1)
    
            Network.CraftingMachine_Craft:InvokeServer("PotionCraftingMachine", PotionRecipeIndex, 1)
    
            return
        end
    
        if Potions['Rainbow Dice Potion']['_am'] < 2 and Potions['Golden Dice Potion']['_am'] >= 3 and Potions['Lucky Potion IV']['_am'] >= 2 then
            -- Craft Rainbow Dice Potion
    
            if Potions['Rainbow Fruit']['_am'] < 4 then
    
                for i, v in next, DataManager:Get()["Inventory"]["Fruit"] do
                    if not v['id'] or not v['_am'] then continue end
                    
                    if v['id'] == 'Rainbow' or v['id'] == 'Orange' or v['id'] == 'Watermelon' then continue end
                    if v['sh'] then continue end
                    if v['_am'] < 100 then continue end
    
                    local args = {
                        [1] = {
                            [tostring(i)] = 100
                        },
    
                        [2] = false
                    }
                    
                    game:GetService("ReplicatedStorage").Network.UpgradeFruitsMachine_Activate:InvokeServer(unpack(args))
                    
                    break
                end
    
                return
            end
    
            local PotionRecipeIndex = DataManager:GetPotionRecipeIndex("Rainbow Dice Potion", 1)
    
            Network.CraftingMachine_Craft:InvokeServer("PotionCraftingMachine", PotionRecipeIndex, 1)
    
            return
        end
    
        -- Craft Lucky Potion II
        if Potions['Lucky Potion I']['_am'] >= 3 then
    
            local PotionRecipeIndex = DataManager:GetPotionRecipeIndex("Lucky Potion", 2)
            
            local NumberOfPotions = 1
    
            if PotionRecipeIndex then
                NumberOfPotions = Potions['Lucky Potion I']['_am'] / 3
                NumberOfPotions = math.floor(NumberOfPotions)
    
                --warn(('Crafting Tier 2 Lucky Potion, Amount: %d'):format(NumberOfPotions))
    
                Network.CraftingMachine_Craft:InvokeServer("PotionCraftingMachine", PotionRecipeIndex, NumberOfPotions)
            end
        end
    
        -- Craft Lucky Potion III
        if Potions['Lucky Potion II']['_am'] >= 4 then
    
            local PotionRecipeIndex = DataManager:GetPotionRecipeIndex("Lucky Potion", 3)
    
            local NumberOfPotions = 1
    
            if PotionRecipeIndex then
                NumberOfPotions = Potions['Lucky Potion II']['_am'] / 4
                NumberOfPotions = math.floor(NumberOfPotions)
    
                --warn(('Crafting Tier 3 Lucky Potion, Amount: %d'):format(NumberOfPotions))
    
                Network.CraftingMachine_Craft:InvokeServer("PotionCraftingMachine", PotionRecipeIndex, NumberOfPotions)
            end
        end
    
        -- Craft Lucky Potion IV
        if Potions['Lucky Potion III']['_am'] >= 5 then
    
            local PotionRecipeIndex = DataManager:GetPotionRecipeIndex("Lucky Potion", 4)
    
            local NumberOfPotions = 1
    
            if PotionRecipeIndex then 
                NumberOfPotions = Potions['Lucky Potion III']['_am'] / 5
                NumberOfPotions = math.floor(NumberOfPotions)
    
                --warn(('Crafting Tier 4 Lucky Potion, Amount: %d'):format(NumberOfPotions))
    
                Network.CraftingMachine_Craft:InvokeServer("PotionCraftingMachine", PotionRecipeIndex, NumberOfPotions)
            end
        end
    end
    
    task.spawn(function()
        while true do task.wait()
            local Passed, Statement= pcall(function()
                DataManager:CraftInstantLuckIII2()
            end)
        
            if not Passed then
                warn(Statement)
            end
        end
    end)









    -- Real End
end



